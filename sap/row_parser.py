from datetime import datetime
from common.row_parser import BaseRowParser
from common.utils import get_common_name

class RowParser(BaseRowParser):

    def __init__(self, publishing_date):
        super().__init__()
        self.publishing_date = publishing_date
        self.publishing__date_input_format = "On %dth of %B %Y"
        self.cve = 0
        self.description = 1
        self.product = 2
        self.version = 3
        self.severity = 4
        self.cvss3_index = 5

    def get_publish_date(self,cells):
        return datetime.strptime(
            self.publishing_date,
            self.publishing__date_input_format)

    def build_product_info(self, title_cell):
        product_node = title_cell.u.next_sibling
        info = product_node.strip()

        spans = product_node.next_sibling
        while spans is not None :
            if spans.string is None:
                for string in spans.stripped_strings:
                    info += string.strip()
            else : 
                info += spans.string.strip()
            spans = spans.next_sibling
            
        # print(info)
        products = info.split("Product-")

        product_list = list()
        version_list = list()
        for product_info in  products:
            info = self.cleanup_product_info(product_info)
            # print("Cleaned product: {0}".format(info))
            product_info_tuple = info.split(",", 1)
            product_list.append(product_info_tuple[0])
            version_list.append(product_info_tuple[1])

        return (product_list, version_list)

    def cleanup_product_info(self,info):
        info = info.replace("Â", "").replace("â","").replace("\u00a0", "")
        info = info.replace("\u0080\u0093", "").replace("\u00c2","")
        start_index = info.index("S")
        return info[start_index:]

    def create_cells_for_update(self, title_cell):
        return None

    def get_cells(self,row):
        # print(row.prettify())
        tds = row.find_all("td")
        cells = list()
        title_cell = tds[1].find("p")

        if title_cell is None: 
            title_cell = tds[1]

        # contents = title_cell.contents
        # print(contents)
        firstword = title_cell.strong.text.split()[0]
        if  firstword != "Update" and firstword != "Multiple" :
            cells.append(title_cell.a)
            cells.append(title_cell.strong)
            
            info = self.build_product_info(title_cell)
            cells += info
            cells.append(tds[2])
            cells.append(tds[3].a)
        else :
            cells = self.create_cells_for_update(title_cell)
        # i=0
        # if cells is not None:
        #     for cell in cells:
        #         print("{}: {}".format(i,cell))
        #         i += 1
        return cells


    def get_version_string(self, cells):
        return cells[self.version]
    
    def get_product(self, cells, vendor, product):
        # return cells[self.product][3:].strip()
        return cells[self.product]

    def remove_vendor_name(self, product):
        return product[3:].strip()

    def parse_version(self, version_string):
        if version_string.find("before") != -1 :
            versions = version_string.split()
            return (None, versions[2], None)
        else :
            versions = list()
            version = version_string.strip().strip("-")
            versions.append(version)
            return versions
        
    def cleanup_version_string(self, version_string):
        version = self.cleanup_string(version_string, "Version -")
        version = self.cleanup_string(version, "Versions -")
        return version.strip()


    def cleanup_string(self, string, prefix):
            start_index = string.find(prefix)
            version = string
            if start_index != -1:
                start_index = start_index+len(prefix)
                version = string[start_index:]
            return version

    def normalize_severity(self, severity): 
        if severity == "Hot News":
            return "CRITICAL"
        return severity.upper()

    def get_cvssv3(self, cells):
        a_node  = cells[self.cvss3_index]
        base_score = a_node.text
        vector = a_node.get('href').split('#')[1]
        return {
            "severity": self.normalize_severity(cells[self.severity].text.strip()),
            "base_score": base_score,
            "vector_string": vector
        }

    def get_threat_info(self, cells):
        desc  = self.get_description(cells)
        common_names = get_common_name(desc)
        if len(common_names) > 0 :
            return {
                "common_names": common_names,
            }
        return None

    def get_cpe_list(self, vendor, product, category, cpes):
        tuples = list()
        i=0
        for current_product in product:
            current_product_tuple = self.get_cpe_list_per_product(vendor, self.remove_vendor_name(current_product),category, cpes[i])
            tuples += current_product_tuple
            i += 1
        return tuples

    def get_cpe_list_per_product(self, vendor, product, category, cpes):
        tuples = list()
        cpes_list = cpes.split(";")
        for version_string in cpes_list:
            versions = version_string.split(",")
            firstVersion = versions[0]
            # print(firstVersion)
            firstVersion = self.cleanup_version_string(firstVersion)
            # print("cleaned: {}".format(firstVersion))
            current_product = product
            if firstVersion.find("before") != -1 :
                version_string = firstVersion
            elif not firstVersion[0].isdigit():
                if firstVersion.find(" ") != -1:
                    (product_suffix, firstVersion) = firstVersion.rsplit(" ", 1)
                    # print("{}: {}".format(product_suffix, firstVersion))
                    current_product +=  product_suffix
                else:
                    firstVersion = firstVersion[1:]

            versions[0] = firstVersion

            tuples.append((vendor, current_product, category, versions))

        return tuples


