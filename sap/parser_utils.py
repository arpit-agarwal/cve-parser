from bs4 import NavigableString

def parse_description_and_node(outer_node):
    #<p><strong> title text <string> </p> with  minor varitions
    title_cell = outer_node.find("p")
    if title_cell is None: 
        title_cell = outer_node

    # print(title_cell.prettify())
    strong_tag = title_cell.strong
    if strong_tag is None:
        strong_tag = title_cell.em

    title = strong_tag.text.strip()
    if title == "":
        all_strong = title_cell.find_all("strong")[1:]
        # print(all_strong)
        for strong_tag in all_strong:
            # print(strong_tag.prettify())
            title = strong_tag.text
            if title != "": break

    return (title_cell, title)

def parse_u_for_product(outer_node, ingore_u_with_text):
    # <p><u>Product</u>- SAP</p> and similar
        original_node = outer_node
        
        if outer_node.u is None:
            outer_node = outer_node.parent

        if outer_node.u is None:
            product_node = original_node.span
        elif outer_node.u.text.strip() == "" :
            u_tags = outer_node.find_all("u")
            u_tag  = u_tags[0]
            total_u_tags = len(u_tags)
            i = 1
            while i < total_u_tags and u_tag.text.strip() == "":
                u_tag = u_tags[i]
                i += 1
            
            product_node = u_tag.next_sibling
        elif outer_node.u.text == ingore_u_with_text:
            u_tags = outer_node.find_all("u")
            if len(u_tags) > 1:
                product_node = u_tags[1].next_sibling
            else:
                product_node = outer_node.u.next_sibling
        else:
            product_node = outer_node.u.next_sibling

        spans = None
        if product_node is None :
            text = ""
        elif isinstance(product_node, NavigableString):
            text = product_node.strip()
        else: 
            text = product_node.text
        # print(text)
        if product_node is not None:
            spans = product_node.next_sibling

        return (text, spans)

def build_product_info_from_spans(text, spans, product_list, version_list, product_and_version_parser):
    i = 0
    current_info = product_and_version_parser(text,"", product_list, version_list)
    while spans is not None :
        if spans.string is None:
            j = 0
            for string in spans.stripped_strings:
                text = string.strip()
                # print("{}.{}: {}".format(i, j,string.strip()))
                j += 1
                current_info = product_and_version_parser(text,current_info, product_list, version_list)
        else : 
            text = spans.string.strip()
            current_info = product_and_version_parser(text,current_info, product_list, version_list)
            # print("raw text: {}".format(text))

        
        # print("{}: {}".format(i, current_info))
        spans = spans.next_sibling
        i += 1

    self.add_version_info(current_info, version_list)
