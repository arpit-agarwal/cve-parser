from common.row_parser import BaseRowParser
from common.utils import find_indices_for_sw_editions, build_sw_edition_version_pair

class RowParser(BaseRowParser):
    editions = ["MongoDB Server", "MongoDB Enterprise"]

    def do_and_dilimiter_handling(start, end, delimiter):
        if start.strip() == "":
            return "Invalid"
        if end == "earlier":
            end = start
            start = None
        return (start, end, None)

    def get_cpe_list_per_product(self, vendor, product, category, cpes):
        tuples = list()
        pair = self.split_cpes(cpes)
        if pair is not None:
            edition, cpes_list = pair
        # print("{}: {}".format(product, cpes_list))
            for version_string in cpes_list:
                # print(version_string)
                tuples.append((vendor, "{}::{}".format(product, edition), category, [version_string.strip()]))
            return tuples
        else :
            return super().get_cpe_list_per_product(vendor, product, category, cpes)

    def split_cpes(self, cpes):
        indices = find_indices_for_sw_editions(cpes, self.editions)
        # print(indices)
        if len(indices) > 0:
            indices.append(len(cpes))
            pair = build_sw_edition_version_pair(cpes,self.editions)
            if pair is not None:
                (edition, version_string) = pair
                cpes_list = version_string.split(";")
                return (edition, cpes_list)
        return None

    def parse_version(self,version_string):
        # for finding sw_edition from version string
        # print(version_string)
        versions = super().parse_version(version_string)
        # print(versions)
        if versions is not None:
            (start, end) = versions
            if start is not None and start.strip() == "":
                return "Invalid"
            if end == "earlier":
                end = start
                start = None
                return (start, end)
            # if not (start is None or start[0].isdigit()):
            #     parts = start.rsplit(" ", 1)
            #     start = parts[1]
            #     sw_edition = parts[0]
            #     return (start, end)

        return versions

    def get_cells(self,row):
        return row.find_all("p")

    def get_cpes(self, cells, vendor, product):
        return self.parse_cpes(cells[self.version].text,
                                    vendor,
                                    product, False)

