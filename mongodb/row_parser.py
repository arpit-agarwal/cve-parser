from datetime import datetime
from common.utils import parse_version as common_parse_version,parse_cpes, get_publish_date, format_date, TIMESTAMP_FORMAT

class RowParser():

    PUBLISHING__DATE_INPUT_FORMAT = "%B %d, %Y"
    PUBLISHINGDATE = 0
    PRODUCT = 1
    DESCRIPTION = 2
    VERSION = 3
    CVE = 5

    def parse_version(self,version_string):
        # for finding sw_edition from version string
        versions = common_parse_version(version_string)
        if versions is not None and versions != "Invalid":
            (start, end, sw_edition) = versions
            if not (start is None or start[0].isdigit()):
                parts = start.rsplit(" ", 1)
                start = parts[1]
                sw_edition = parts[0]
                return (start, end, sw_edition)

        return versions

    def parse(self, alert, vendor, url,product, webpage_name):

        # print(alert.prettify())
        row = alert.find_all("p")
        published_date = get_publish_date(
            row[self.PUBLISHINGDATE].text,
            self.PUBLISHING__DATE_INPUT_FORMAT)
        json_row = {
            "timestamp": format_date(datetime.utcnow(), TIMESTAMP_FORMAT),
            "published_date": format_date(published_date, TIMESTAMP_FORMAT),
            "id": row[self.CVE].text,
            "url": url,
            "name": webpage_name,
            "description": row[self.DESCRIPTION].text,
            "cpes":  parse_cpes(row[self.VERSION].text,
                                     vendor,
                                     product, self.parse_version)
        }
        return json_row


