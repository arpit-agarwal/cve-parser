from datetime import datetime
from common.utils import parse_version, get_publish_date, parse_cpes, format_date, TIMESTAMP_FORMAT

class BaseRowParser:

    def parse(self, row, vendor, url,product, webpage_name):
            cells = self.get_cells(row)
            published_date = self.get_publish_date(cells)
            cpes = self.get_cpes(cells, vendor, product)
            cvssv2 = self.get_cvssv2(cells)
            cvssv3 = self.get_cvssv3(cells)
            json_row = self.get_json_row(cells, published_date, url, webpage_name, cpes, cvssv2, cvssv3)
            return json_row

    def get_cells(self,row):
        return row.find_all("td")

    def parse_version(self,version_string):
        return parse_version(version_string)

    def get_cpes(self,cells, vendor, product):
        return parse_cpes(cells[self.VERSION].text,
                                    vendor,
                                    product, self.parse_version)

    def get_cvssv2(self, cells):
        return None

    def get_cvssv3(self, cells):
        return None

    def get_publish_date(self,cells):
        return get_publish_date(
                cells[self.PUBLISHINGDATE].text,
                self.PUBLISHING__DATE_INPUT_FORMAT)

    def get_json_row(self,cells, published_date, url, webpage_name, cpes, cvssv2 = None, cvssv3 = None):
        json_row = {
            "timestamp": format_date(datetime.utcnow(), TIMESTAMP_FORMAT),
            "published_date": format_date(published_date, TIMESTAMP_FORMAT),
             "id": cells[self.CVE].text.strip(),
             "url": url,
             "name": webpage_name,
             "description": cells[self.DESCRIPTION].text.strip(),
             "cpes":  cpes
        }
        if cvssv2 is not None:
            json_row["cvssv2"] = cvssv2
        if cvssv3 is not None:
            json_row["cvssv3"] = cvssv3

        return json_row


