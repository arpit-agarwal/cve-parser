import json
common_names = [ 
    "Cross-Site Scripting",
    "Cross-Site-Scripting",
    "Cross-Site Request Forgery",
    "Code Injection",
    "Denial of service",
    "Directory Traversal",
    "Information Disclosure",
    "Privilege Escalation",
    "Missing Authorization",
    "Missing Authentication",
    "Missing XML Validation",
    "Remote Code Execution",
    "SQL Injection",
    ]
def get_common_name(desc):
    names = list()
    for name in common_names:
        if desc.lower().find(name.lower()) != -1 :
            if (name == "Cross-Site-Scripting") or (name == "Cross-Site Scripting"):
                name = "Cross-Site Scripting (XSS)"
            names.append(name)
    return names

def substring(string, prefix):
        start_index = string.find(prefix)
        version = string
        if start_index != -1:
            start_index = start_index+len(prefix)
            version = string[start_index:]
        return version

def dump_as_json(vendor, cves):
    securtiy_alerts =  {
            "type": "vendor",
            "source": vendor,
            "cves": cves
    } 
    return json.dumps(securtiy_alerts)

def split_on_any(string, delimiters, custom_handlers):
        for delimiter in delimiters:
            if string.find(delimiter) != -1:
                versions = string.split(delimiter, 2)
                end = versions[1].strip()
                start = versions[0].strip()
                if custom_handlers is not None:
                    delimiter_handler = custom_handlers.get(delimiter)
                    if delimiter_handler is not None:
                        return delimiter_handler(start,end,delimiter)
                return (start, end, None)
        return None

def deep_clean_string(text, substrings):
    for substring in substrings:
        text = text.replace(substring, "")
    return text
