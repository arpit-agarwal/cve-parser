from datetime import datetime

TIMESTAMP_FORMAT = '%Y-%m-%dT%H:%MZ'

def split_on_any(string, delimiters):
    for delimiter in delimiters:
        if string.find(delimiter) != -1:
            versions = string.split(delimiter, 2)
            end = versions[1].strip()
            start = versions[0].strip()
            if delimiter == "and":
                return do_and_dilimiter_handling(start, end)

            return (start, end, None)
    return None


def do_and_dilimiter_handling(start, end):
    if start.strip() == "":
        return "Invalid"
    if end == "earlier":
        end = start
        start = None
    return (start, end, None)


def parse_version(version_string):
    return split_on_any(version_string, ["-", "to", "and"])


def get_publish_date(date_string, date_format):
    return datetime.strptime(date_string, "%B %d, %Y")


def format_date(date, date_format):
    return date.strftime('%Y-%m-%dT%H:%MZ')

def build_cpe23_uri(category,vendor, product, version):
    return str.format("cpe:2.3:{}:{}:{}:{}:*:*:*:*:*:*:*",category,vendor, product, version)

def parse_cpes(cpes, vendor, product, vendor_parse_version, cpe23Uri_is_required = False):
    category = "a"
    cpes_list = cpes.split(",")
    cpes_collection = list()
    for cpe in cpes_list:
        json_cpe = {
            "vendor": vendor,
            "category": category,
            "product": product,
        }

        if cpe.find("(") != -1:
            cpe = cpe.split("(")[0]
        versions = vendor_parse_version(cpe)
        if versions == "Invalid":
            continue
        if versions is None:
            json_cpe["version"] = cpe.strip()
        else:
            (start, end, sw_edition) = versions
            if start == end :
                json_cpe["version"] = start
            if start is not None:
                    json_cpe["versionStartIncluding"] = start 
            json_cpe["versionEndIncluding"] = end
            if sw_edition is not None:
                json_cpe["sw_edition"] = sw_edition
        
        if cpe23Uri_is_required :
            cpe_version = '*'
            if "version" in json_cpe: 
                cpe_version = json_cpe.get("version")
            json_cpe["cpe23Uri"] = build_cpe23_uri(category,vendor, product, cpe_version)
        cpes_collection.append(json_cpe)
    return {"operator": "OR", "cpe_list": cpes_collection}

